<!DOCTYPE html>
<html>

<head>
    <title> {{ .Title }} </title>
</head>

<body>
    <h1> {{ .Title }} </h1>
    <hr>
    <form name="upload" enctype="multipart/form-data">
        <input type="file" name="file" id="file">
        <input type="submit" value="upload" onclick="upload_file()" formaction="javascript:void(0)">
        <input type="submit" value="chunk upload" onclick="resume_upload_file()" formaction="javascript:void(0)">
        <input type="submit" value="mkdir" onclick="mkdir()" formaction="javascript:void(0)">
    </form>
    <hr>
    <table>
        <tr>
            <td><a href="../">../</a></td><td>Available: {{ .DiskAvailable }}</td>
        </tr>
        {{ range .Files }}
        <tr>
            <td><a href="{{ .Link }}">{{ .HtmlName }}</a></td>
            <td>{{ .ModTime }}</td>
            <td>{{ .Info.Size }}</td>
            <td>{{ .SizeReadable }}</td>
            <td><a href="javascript:void(0)" onclick="delete_file('{{ .Name }}', '{{ .Link }}')">delete</a></td>
            <td><a href="javascript:void(0)" onclick="rename_file('{{ .Name }}', '{{ .Link }}')">rename</a></td>
            <td><a href="{{ .Link }}?download=hash" onclick="return confirm(`Want to hash '{{ .Name }}'?`)">hash</a></td>
            <td>
                {{ if .Info.IsDir }}
                <a href="{{ .Link }}?download=tar" onclick="return confirm(`Want to tar '{{ .Name }}'?`)">tar</a>
                {{ end }}
            </td>
        </tr>
        {{ end }}
    </table>
    <hr>
</body>
<style>
    table {
        font-family: monospace;
    }

    table a {
        max-width: 50em;
        display: inline-block;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
    }

    td {
        padding-right: 1em;
        padding-top: 2px;
        padding-bottom: 2px;
    }
</style>
<script>
    function request(method, url, body, header) {
        var request = new XMLHttpRequest();

        request.onreadystatechange = function () {
            if (request.readyState == request.DONE) {
                if (200 <= request.status && request.status < 300) {
                    location.reload();
                } else {
                    alert(request.response);
                }
            }
        }

        request.open(method, url);
        if (header !== undefined && header !== null) {
            for (const key in header) {
                request.setRequestHeader(key, header[key])
            }
        }
        request.send(body);
    }

    function mkdir() {
        var result = prompt("Mkdir");
        console.log(result);
        if (result != null && result != "") {
            var body = {
                "action": "mkdir",
                "property": {
                    "name": result,
                }
            };
            var header = {
                "Content-Type": "application/json; charset=UTF-8",
            };

            request("POST", window.location.pathname, JSON.stringify(body), header);
        }
    }

    function delete_file(name, url) {
        var result = confirm(`Want to delete '${name}'?`);
        if (result) {
            request("DELETE", url, null);
        }
    }

    function rename_file(name, url) {
        var result = prompt(`Want to rename '${name}'?`);
        console.log(result);
        if (result != null && result != "") {
            var body = {
                "action": "rename",
                "property": {
                    "name": result,
                },
            };
            var header = {
                "Content-Type": "application/json; charset=UTF-8",
            };

            request("POST", url, JSON.stringify(body), header);
        }
    }

    function upload_file() {
        const files = document.getElementById("file").files;
        if (files.length < 1) {
            alert("Please choose file before upload.");
            return;
        }
        var formData = new FormData();

        formData.append("file", files[0])
        request("POST", window.location.pathname, formData)
    }

    function resume_upload_file() {
        const files = document.getElementById("file").files;
        if (files.length < 1) {
            alert("Please choose file before upload.");
            return;
        }
        send_upload(files[0], 0, null, 2);
    }

    async function send_upload(file, begin, session_id = null, size = 256 * 1024) {
        if (size < 2) {
            alert(`Slice ${file.name} with too small size ${size}`)
            return
        }
        var end = begin + size;
        if (!session_id) {
            session_id = await encode_file(file);
        }
        var header = {
            "Content-Type": "application/octet-stream",
            "Content-Disposition": `attachment; filename="${file.name}"`,
            "Content-Range": `bytes ${begin}-${end - 1}/${file.size}`,
            "Session-ID": session_id,
        };

        var req = new XMLHttpRequest();

        if (end >= file.size) {
            end = file.size;
            header["Content-Range"] = `bytes ${begin}-${end - 1}/${file.size}`;
            req.onreadystatechange = function () {
                if (req.readyState == req.DONE) {
                    if (200 <= req.status && req.status < 300) {
                        location.reload();
                    } else {
                        alert(req.response);
                    }
                }
            }
        } else {
            req.onreadystatechange = function () {
                if (req.readyState == req.DONE) {
                    if (200 <= req.status && req.status < 300) {
                        try {
                            var next = parseInt(req.responseText.split('/')[0].split("-")[1]);
                            console.log(`Uploaded ${file.name} ${next + 1} Bytes`)
                            send_upload(file, next + 1, session_id);
                        } catch (error) {
                            alert(error);
                        }
                    } else {
                        alert(req.response);
                    }
                }
            }
        }

        req.open("POST", `/upload${window.location.pathname}`);
        for (const key in header) {
            req.setRequestHeader(key, header[key])
        }
        req.send(file.slice(begin, end));
    }

    async function encode_file(file, additional = null) {
        var fileId = `${window.location.pathname}/${file.name}/${file.size}/${file.lastModified}`;
        if (additional)
            fileId += ` ${additional}`;
        return await hash(fileId);
    }

    async function hash(message) {
        const data = new TextEncoder().encode(message);
        const hashBuffer = await window.crypto.subtle.digest("SHA-256", data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        return hashHex;
    }
</script>

</html>